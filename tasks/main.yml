---
# tasks file for bootstrap
- name: wait for the host
  wait_for:
    port: "{{ ansible_port | default('22') }}"
    host: "{{ (ansible_ssh_host | default(ansible_host) | default(inventory_hostname)) }}"
  connection: local
  become: no
  when:
    - ansible_connection is defined
    - ansible_connection != "docker"
    - bootstrap_wait_for_host

- name: register apk
  raw: apk --version
  register: apk
  changed_when: no
  failed_when: no
  become: no
  check_mode: no

- name: register apt_get
  raw: apt-get --version
  register: apt_get
  changed_when: no
  failed_when: no
  become: no
  check_mode: no

- name: register pkg_add
  raw: pkg_info
  register: pkg_add
  changed_when: no
  failed_when: no
  become: no
  check_mode: no

- name: register dnf
  raw: dnf --version
  register: dnf
  changed_when: no
  failed_when: no
  become: no
  check_mode: no

- name: register emerge
  raw: emerge --version
  register: emerge
  changed_when: no
  failed_when: no
  become: no
  check_mode: no

- name: register pacman
  raw: pacman --version
  register: pacman
  changed_when: no
  failed_when: no
  become: no
  check_mode: no

- name: register pkg
  raw: pkg --version
  register: pkg
  changed_when: no
  failed_when: no
  become: no
  check_mode: no

- name: register yum
  raw: yum --version
  register: yum
  changed_when: no
  failed_when: no
  become: no
  check_mode: no

- name: register zypper
  raw: zypper --version
  register: zypper
  changed_when: no
  failed_when: no
  become: no
  check_mode: no

- name: install software with apk
  raw: "apk update ; apk add {{ bootstrap_apk_packages }}"
  when:
    - apk.rc == 0
  register: apkresult
  changed_when:
    - "'Installing' in apkresult.stdout"
  remote_user: "{{ bootstrap_user }}"
  until: apkresult is succeeded
  retries: "{{ bootstrap_retries }}"

- name: install software with apt-get
  raw: "apt-get update ; apt-get -y install {{ bootstrap_apt_packages }}"
  when:
    - apt_get.rc == 0
    - zypper.rc != 0
  register: apt_getresult
  changed_when:
    - "' 0 newly installed' not in apt_getresult.stdout"
  remote_user: "{{ bootstrap_user }}"
  until: apt_getresult is succeeded
  retries: "{{ bootstrap_retries }}"

- name: check if packages are already installed
  raw: "pkg_info -E /usr/local/bin/python3 -E /usr/local/bin/sudo"
  register: pkg_info_getresult
  changed_when: no
  failed_when: no
  become: no
  check_mode: no

- name: install software with pkg_add
  raw: "pkg_add -Iz {{ bootstrap_pkg_add_packages }}"
  when:
    - pkg_add.rc == 0
    - pkg_info_getresult.rc != 0
  register: pkg_add_result
  remote_user: "{{ bootstrap_user }}"
  until: pkg_add_result is succeeded
  retries: "{{ bootstrap_retries }}"

- name: check for symlink
  raw: "test -L /usr/bin/python"
  when: pkg_add_result is succeeded
  register: symlink_exists
  changed_when: no
  failed_when: no
  become: no
  check_mode: no

- name: create symlink
  raw: "/bin/ln -sf /usr/local/bin/python3 /usr/bin/python"
  when:
    - pkg_add_result is succeeded
    - symlink_exists.rc != 0

- name: install software with dnf
  raw: "dnf -y install {{ bootstrap_dnf_packages }}"
  when:
    - dnf.rc == 0
  register: dnfresult
  changed_when:
    - "'Nothing' not in dnfresult.stdout"
  remote_user: "{{ bootstrap_user }}"
  until: dnfresult is succeeded
  retries: "{{ bootstrap_retries }}"

- name: install software with emerge
  raw: "{{ bootstrap_emerge_command }}"
  when:
    - emerge.rc == 0
  register: emergeresult
  changed_when:
    - "'changed' in emergeresult.stdout"
  remote_user: "{{ bootstrap_user }}"
  until: emergeresult is succeeded
  retries: "{{ bootstrap_retries }}"

- name: install software with pacman
  raw: "pacman -Sy ; pacman -T {{ bootstrap_pacman_packages }} || pacman -S --noconfirm {{ bootstrap_pacman_packages }}"
  when:
    - pacman.rc == 0
  register: pacmanresult
  changed_when:
    - "' installing python' in pacmanresult.stdout"
  remote_user: "{{ bootstrap_user }}"
  until: pacmanresult is succeeded
  retries: "{{ bootstrap_retries }}"

- name: install software with pkg
  raw: >
    ASSUME_ALWAYS_YES=YES
    pkg install {{ bootstrap_pkg_packages }}
    ; ln -s /usr/local/bin/python /usr/bin/python
    || exit 0
  when:
    - pkg.rc == 0
  register: pkgresult
  changed_when:
    - "'Extracting python' in pkgresult.stdout"
  remote_user: "{{ bootstrap_user }}"
  until: pkgresult is succeeded
  retries: "{{ bootstrap_retries }}"

- name: install software with yum
  raw: "yum -y install {{ bootstrap_yum_packages }}"
  when:
    - yum.rc == 0
  register: yumresult
  changed_when:
    - "'Nothing' not in yumresult.stdout"
  remote_user: "{{ bootstrap_user }}"
  until: yumresult is succeeded
  retries: "{{ bootstrap_retries }}"

- name: install software with zypper
  raw: "zypper -n install {{ bootstrap_zypper_packages }}"
  when:
    - zypper.rc == 0
  register: zypperresult
  changed_when:
    - "'Nothing' not in zypperresult.stdout"
  remote_user: "{{ bootstrap_user }}"
  failed_when: no
  until: zypperresult is succeeded
  retries: "{{ bootstrap_retries }}"

- name: gather facts
  setup:
  become: no

- name: add community repository for alpine
  lineinfile:
    path: /etc/apk/repositories
    line: "{{ bootstrap_alpine_community_repo }}"
  when:
    - ansible_distribution == "Alpine"

- name: install bootstrap packages for OpenBSD
  openbsd_pkg:
    name: "{{ bootstrap_packages }}"
    state: "{{ bootstrap_package_state }}"
  register: packageresult
  until: packageresult is succeeded
  retries: "{{ bootstrap_retries }}"
  when:
    - ansible_distribution == "OpenBSD"

- name: install bootstrap packages
  package:
    name: "{{ bootstrap_packages }}"
    state: "{{ bootstrap_package_state }}"
  register: packageresult
  until: packageresult is succeeded
  retries: "{{ bootstrap_retries }}"
  when:
    - ansible_distribution != "OpenBSD"

- name: install software to support stable modules
  package:
    name: "{{ bootstrap_stable_packages }}"
    state: "{{ bootstrap_package_state }}"
  when:
    - bootstrap_stable_packages is defined
  register: packagestableresult
  until: packagestableresult is succeeded
  retries: "{{ bootstrap_retries }}"
  notify:
    - gather facts

- name: install software to support preview modules
  package:
    name: "{{ bootstrap_preview_packages }}"
    state: "{{ bootstrap_package_state }}"
  when:
    - bootstrap_preview
    - bootstrap_preview_packages is defined
  register: packagepreviewresult
  until: packagepreviewresult is succeeded
  retries: "{{ bootstrap_retries }}"
  notify:
    - gather facts

- name: flush handlers
  meta: flush_handlers
